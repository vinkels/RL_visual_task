setwd("~/Code/RL_visual_task")
setwd("~/Code/RL_visual_task/analysis")
lml = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'l']
lmm = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'm']
lhl = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'l']
lhh = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'h']
mhm = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'm']
mhh = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'h']
lmn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
lhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
mhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
shapiro.test(lml)
shapiro.test(lmm)
shapiro.test(lhl)
shapiro.test(lhh)
shapiro.test(mhm)
shapiro.test(mhh)
if(!require(lawstat)){install.packages("lawstat")}
if(!require(ez)){install.packages("ez")}
if(!require(pwr)){install.packages("pwr")}
if(!require(car)){install.packages("car")}
shapiro.test(lml)
shapiro.test(lmm)
shapiro.test(lhl)
shapiro.test(lhh)
shapiro.test(mhm)
shapiro.test(mhh)
lml = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'l']
lmm = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'm']
lhl = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'l']
lhh = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'h']
mhm = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'm']
mhh = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'h']
lmn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
lhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
mhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
shapiro.test(lml)
shapiro.test(lmm)
shapiro.test(lhl)
shapiro.test(lhh)
shapiro.test(mhm)
shapiro.test(mhh)
lml = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'l']
lmm = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'm']
lhl = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'l']
lhh = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'h']
mhm = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'm']
mhh = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'h']
lmn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
lhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
mhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
shapiro.test(lml)
shapiro.test(lmm)
shapiro.test(lhl)
shapiro.test(lhh)
shapiro.test(mhm)
shapiro.test(mhh)
ctrl_set <- read.csv("~/Code/RL_visual_task/analysis/output/ctrl_set.csv")
View(ctrl_set)
lml = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'l']
lmm = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'm']
lhl = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'l']
lhh = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'h']
mhm = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'm']
mhh = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'h']
lmn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
lhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
mhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
shapiro.test(lml)
shapiro.test(lmm)
shapiro.test(lhl)
shapiro.test(lhh)
shapiro.test(mhm)
shapiro.test(mhh)
ctrl_data <- read.csv("~/Code/RL_visual_task/analysis/output/ctrl_set.csv")
View(ctrl_data)
lml = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'l']
lmm = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'm']
lhl = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'l']
lhh = ctrl_data$response_size[ctrl_data$type =='lh' & ctrl_data$response == 'h']
mhm = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'm']
mhh = ctrl_data$response_size[ctrl_data$type =='mh' & ctrl_data$response == 'h']
lmn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
lhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
mhn = ctrl_data$response_size[ctrl_data$type =='lm' & ctrl_data$response == 'n']
shapiro.test(lml)
shapiro.test(lmm)
shapiro.test(lhl)
shapiro.test(lhh)
shapiro.test(mhm)
shapiro.test(mhh)
ctrl.mean <- aggregate(ctrl_data$response_size,
by = list(ctrl_data$response,
ctrl_data$type),
FUN = 'mean')
ctrl_data$response = factor(ctrl_data$response,
levels=unique(ctrl_data$response))
ctrl_data$ppn = factor(ctrl_data$ppn,
levels=unique(ctrl_data$ppn))
ctrl_data$type = factor(ctrl_data$type,
levels=unique(ctrl_data$type))
ctrl.AOV <- aov(response_size~(response*type)+Error(ppn/(type*response)), data = ctrl_data)
summary(ctrl.AOV)
# repeated measures anova
t.test(lml,lmm, paired=TRUE)
t.test(llm,mlm, paired=TRUE)
t.test(lhl,lhh, paired=TRUE)
t.test(mhm,mhh, paired=TRUE)
if(!require(lawstat)){install.packages("lawstat")}
if(!require(ez)){install.packages("ez")}
if(!require(pwr)){install.packages("pwr")}
if(!require(car)){install.packages("car")}
if(!require(psych)){install.packages("psych")}
if(!require(multcompView)){install.packages("multcompView")}
if(!require(lsmeans)){install.packages("lsmeans")}
if(!require(FSA)){install.packages("FSA")}
lr_set$response = factor(lr_set$response,
levels=unique(lr_set$response))
lr_set$ppn = factor(lr_set$ppn,
levels=unique(lr_set$ppn))
lr_set$type = factor(lr_set$type,
levels=unique(lr_set$type))
lr_set <- read.csv("~/Code/RL_visual_task/analysis/output/lr_set.csv")
View(lr_set)
lr_set$response = factor(lr_set$response,
levels=unique(lr_set$response))
lr_set$ppn = factor(lr_set$ppn,
levels=unique(lr_set$ppn))
lr_set$type = factor(lr_set$type,
levels=unique(lr_set$type))
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==1])
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==3])
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==5])
shapiro.test(lr_set$response_size[lr_set$type=="m" & lr_set$response==1])
shapiro.test(lr_set$response_size[lr_set$type=="m" & lr_set$response==3])
shapiro.test(lr_set$response_size[lr_set$type=="m" & lr_set$response==5])
shapiro.test(lr_set$response_size[lr_set$type=="h" & lr_set$response==1])
shapiro.test(lr_set$response_size[lr_set$type=="h" & lr_set$response==3])
shapiro.test(lr_set$response_size[lr_set$type=="h" & lr_set$response==5])
# normality check
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==1])
lr_set <- read.csv("~/Code/RL_visual_task/analysis/output/lr_set.csv")
View(lr_set)
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==1])
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==3])
shapiro.test(lr_set$response_size[lr_set$type=="l" & lr_set$response==5])
shapiro.test(lr_set$response_size[lr_set$type=="m" & lr_set$response==1])
shapiro.test(lr_set$response_size[lr_set$type=="m" & lr_set$response==3])
shapiro.test(lr_set$response_size[lr_set$type=="m" & lr_set$response==5])
shapiro.test(lr_set$response_size[lr_set$type=="h" & lr_set$response==1])
shapiro.test(lr_set$response_size[lr_set$type=="h" & lr_set$response==3])
shapiro.test(lr_set$response_size[lr_set$type=="h" & lr_set$response==5])
aov_response_type <- aov(response_size ~ response*type + Error(ppn/type), data=lr_set)
summary(aov_response_type)
#type
l = lr_set$response_size[lr_set$type=="l"]
m = lr_set$response_size[lr_set$type=="l"]
l = lr_set$response_size[lr_set$type=="l"]
m = lr_set$response_size[lr_set$type=="m"]
h = lr_set$response_size[lr_set$type=="h"]
#reward
r_l = lr_set$response_size[lr_set$response==1]
#type
t_l = lr_set$response_size[lr_set$type=="l"]
t_m = lr_set$response_size[lr_set$type=="m"]
t_h = lr_set$response_size[lr_set$type=="h"]
#reward
r_l = lr_set$response_size[lr_set$response==1]
r_m = lr_set$response_size[lr_set$response==3]
r_h = lr_set$response_size[lr_set$response==5]
shapiro.test(t_l)
shapiro.test(t_m)
shapiro.test(t_h)
shapiro.test(r_l)
shapiro.test(r_m)
shapiro.test(r_h)
friedman.test(response_size ~ ppn | response,
data = lr_set)
friedman.test(response_size ~ ppn | type,
data = lr_set)
XT.t
KendallW(XT.t,
correct=TRUE,
test=TRUE)
XT.r
KendallW(XT.r,
correct=TRUE,
test=TRUE)
XT.t = xtabs(response_size ~ ppn + type,
data = lr_set)
XT.r = xtabs(response_size ~ ppn + response,
data = lr_set)
if(!require(lawstat)){install.packages("lawstat")}
if(!require(ez)){install.packages("ez")}
if(!require(pwr)){install.packages("pwr")}
if(!require(car)){install.packages("car")}
if(!require(psych)){install.packages("psych")}
if(!require(multcompView)){install.packages("multcompView")}
if(!require(lsmeans)){install.packages("lsmeans")}
if(!require(FSA)){install.packages("FSA")}
KendallW(XT.t,
correct=TRUE,
test=TRUE)
XT.r
KendallW(XT.r,
correct=TRUE,
test=TRUE)
library(rcompanion)
if(!require(DescTools)){install.packages("DescTools")}
friedman.test(response_size ~ ppn | response,
data = lr_set)
friedman.test(response_size ~ ppn | type,
data = lr_set)
XT.t = xtabs(response_size ~ ppn + type,
data = lr_set)
XT.r = xtabs(response_size ~ ppn + response,
data = lr_set)
XT.t
KendallW(XT.t,
correct=TRUE,
test=TRUE)
XT.r
KendallW(XT.r,
correct=TRUE,
test=TRUE)
library(rcompanion)
PT = pairwiseSignTest(response_size ~ ppn | type,
data   = lr_set,
method = "fdr")
PT
cldList(p.adjust ~ Comparison,
data = PT,
threshold  = 0.05)
friedman.test(response_size ~ ppn | response,
data = lr_set)
friedman.test(response_size ~ ppn | type,
data = lr_set)
XT.t = xtabs(response_size ~ ppn + type,
data = lr_set)
XT.r = xtabs(response_size ~ ppn + response,
data = lr_set)
XT.t
KendallW(XT.t,
correct=TRUE,
test=TRUE)
XT.r
KendallW(XT.r,
correct=TRUE,
test=TRUE)
save.image("~/Code/RL_visual_task/analysis/R/vars.RData")
